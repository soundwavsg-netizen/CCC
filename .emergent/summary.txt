<analysis>
The previous AI engineer successfully executed a multi-phase task focused on enhancing the Tuition Centre demo within the CCC corporate website. Initial efforts involved systematic data extraction from P2-J2 PDF documents, leading to a comprehensive 666-class dataset. This data was then uploaded to Firebase Firestore, with a critical fix implemented to consolidate duplicate tutor profiles. Subsequently, the FastAPI backend's  endpoint was integrated with Firebase, and the LLM's system message was refined. Multiple iterations of bug fixing addressed: query failures, exposing Querying Firebase, incorrect handling of 2026 classes, LLM not presenting all schedule details, incorrect location prompting, and ambiguity in tutor names. Frontend mobile responsiveness was also addressed. The current task involves fixing a chatbox scrolling issue, specifically adding a React ref to the input field.
</analysis>

<product_requirements>
The primary objective was to expand the Demos Hub with a functional Tuition Centre chatbot. This involved:
1.  **Rebranding:** Genericizing the RMSS demo to Tuition Centre with updated AI training.
2.  **Data Integration:** Systematically extracting comprehensive tutor and class data from P2-J2 PDF documents and migrating it to Firebase Firestore for robust querying (666 classes, 44 unique tutors).
3.  **Chatbot Enhancement:** Updating the AI system message with 2026-2027 Math transition and calendar data, enabling it to query Firebase for factual information. Enhancements included accurate responses for class/tutor queries, multi-level/location/session details, and internal logic for future-dated classes.
4.  **User Experience Fixes:** Resolving UI button contrast, implementing a global error handler, ensuring mobile responsiveness for the chat interface, and refining chatbot dialogue to be precise. This also includes avoiding technical jargon, clarifying ambiguous tutor names (e.g., Sean needing disambiguation), displaying all relevant class schedules without unnecessary prompts, and preventing page scroll on chat message send.
5.  **Data Accuracy:** Consolidating tutor profiles in Firebase to ensure one profile per unique tutor (e.g., Eugene Tan A and Eugene Tan B becoming one Eugene Tan).
</product_requirements>

<key_technical_concepts>
-   **Full-Stack Development:** FastAPI (Python backend), React (JavaScript frontend).
-   **Database:** Firebase Firestore (for tuition data), MongoDB (existing).
-   **AI Integration:** Emergent LLM Key with  (using ).
-   **Data Management:** PDF data extraction, CSV generation, programmatic data upload.
-   **Frontend UI:** React components, CSS for styling (mobile responsiveness, ).
</key_technical_concepts>

<code_architecture>
The application utilizes a React frontend and a FastAPI backend, designed for modularity and scalability, with Firebase Firestore integrated for specific data.


-   ****: The central backend file handling API routes.
    -   **Summary**: Heavily modified to integrate Firebase, retrieve class/tutor data, and refine the chatbot's LLM prompt for intelligent querying, disambiguation, and structured responses. It includes helper functions for Firebase interaction and robust error handling.
    -   **Changes**: Firebase initialization, ,  helper functions,  update, and refactored  endpoint. Fixes for tutor name extraction, query logic, and response formatting (e.g., location-based class grouping).
-   ****: Displays the tuition center AI chat demo.
    -   **Summary**: Implements the chat interface and handles user interaction.
    -   **Changes**: Modified for mobile responsiveness (message bubbles, header, content sections). Currently being updated to manage input focus and prevent page scrolling on message send.
-   ****: Global CSS file for the frontend.
    -   **Summary**: Defines global styles and utility classes.
    -   **Changes**: Added  for improved text wrapping.
-   ****: New script.
    -   **Summary**: Handles the bulk upload of all P2-J2 class and tutor data to Firebase, including logic for tutor name normalization.
-   ****: New script.
    -   **Summary**: Re-runs the Firebase upload with corrected tutor normalization logic to consolidate duplicate tutor profiles.
</code_architecture>

<pending_tasks>
-   **WhatsApp Bot Connection:** Resolve persistent Connection Failure errors in  for QR code generation and re-authentication.
-   **UI Scrolling Fix:** Complete the implementation of input focus management and page scrolling prevention in .
</pending_tasks>

<current_work>
The AI engineer is currently addressing a UI/UX issue in the  component. The user reported that when they type a message in the chatbox and press Enter, the entire page scrolls down instead of the scroll remaining within the chat messages area and focus staying on the input field. To fix this, the engineer is modifying the  function to manage input focus. The specific action being taken is to locate the input field within the  component to attach a React  to it, which will allow programmatic control over its focus.
</current_work>

<optional_next_step>
Add a React ref to the chat input field in  to manage focus.
</optional_next_step>
