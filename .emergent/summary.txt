<analysis>
The AI engineer's work primarily focused on the Math Results Analysis System and enhancing the Tuition Centre Chatbot. Key initial tasks included fixing data issues in the chatbot and creating the foundational Math Analysis System. Subsequent efforts centered on implementing a dynamic weak performance threshold, then a major undertaking to build out tutor authentication and management features. This involved creating admin and login pages, setting up JWT-based authentication, ensuring tutor-specific data isolation, and enabling admin password resets. Several rounds of debugging addressed data fetching inconsistencies, circular imports, JWT errors, and incorrect data filtering, ultimately achieving robust tutor data isolation and correct analytics. The final tasks involved refining the admin's tutor creation form with accurate location options.
</analysis>

<product_requirements>
The project consists of two core products:
**1. Tuition Centre Chatbot:** Focuses on data accuracy (tutor/class consolidation, S3 AMath Bishan fix), chatbot intelligence (2026-2027 data, Firebase querying, multi-turn context, clarifying questions), UI/UX improvements (button contrast, mobile responsiveness, enrollment form enhancements with Cancel button and scrolling), and new features (enrollment/reservation form, basic admin UI for class data).

**2. Math Results Analysis System (New Project):** A web-based system for tutors to upload (manual, CSV, AI PDF analysis via GPT-4o vision), store (Firebase Firestore), and analyze student math results (S1-S4, J1-J2). It tracks trends, generates revision plans (using ), creates internal assessment tests (PDFs via ), and provides a tutor dashboard with filtering and analytics (charts, tables, weak/strong topic identification with adjustable thresholds). Recent requirements extended to include:
*   A dedicated **Admin Page for Tutor Management** where administrators can add new tutors, define their teaching locations, levels, and subjects via checkboxes, and generate initial login credentials (login ID based on tutor name, temporary password).
*   A **Tutor Login Page** where tutors log in, are prompted to change their temporary password upon first login, and access a personalized dashboard.
*   The system must ensure **data isolation**, meaning tutors only see results and manage students associated with their assigned profile.
*   The **tutor dashboard** should dynamically show locations, levels, and subjects based on the tutor's configured profile.
*   The **Revision Planning page** needs filters by level and location, a toggle for grid/list view, display of overall scores on student cards, and functionality to delete or edit individual result records.
*   The **Analytics tab** should correctly calculate averages, especially when filtered by tutor-specific criteria.
*   **Password recovery**: Admins should be able to view initial temporary passwords and reset forgotten passwords for any tutor, forcing a password change on next login.
*   The **Admin tutor creation form** should strictly use a predefined list of 5 locations (Marine Parade, Bishan, Punggol, Kovan, Jurong).
</product_requirements>

<key_technical_concepts>
-   **Full-Stack Development:** FastAPI (Python), React (JavaScript).
-   **Database:** Firebase Firestore (for Math Analysis), MongoDB (existing for chatbot).
-   **AI/LLM:** GPT-4o for PDF analysis,  for chatbot.
-   **Authentication:** JWT (PyJWT library) for tutor login.
-   **Frontend UI:** React components, state management, Chart.js.
-   **Data Processing:**  for PDF generation, data seeding.
-   **Deployment:** Kubernetes, supervisorctl.
</key_technical_concepts>

<code_architecture>

-   ****: Main FastAPI entry.
    -   Summary: Handles general routing and integrates other routers.
    -   Changes: Included  router.
-   ****: Dedicated FastAPI router for Math Analysis.
    -   Summary: Manages student result upload, analysis, revision plans, and assessment generation.
    -   Changes: Added endpoints for , , . Updated , , , , and  endpoints to query  collection directly (not subcollections) and require  filtering with JWT authentication. Fixed JWT import error by using .
-   ** (NEW)**: Handles tutor authentication and management.
    -   Summary: New router for tutor creation, login, JWT token generation/validation, and password reset.
    -   Changes: New file created. Implemented endpoints for tutor creation, login, JWT token verification, and an admin endpoint for resetting tutor passwords. Defines  for JWT.
-   ** (NEW)**: Script to populate initial demo data.
    -   Summary: Creates a demo tutor (Sean Yeo) and sample student results for testing.
    -   Changes: New file created. Updated to store student data with correct RMSS - Location format and associated with .
-   ** (NEW)**: Script for creating additional test tutors.
    -   Summary: Used for isolated testing of new tutor accounts.
    -   Changes: New file created. Modified to avoid circular import issues and to create a new tutor (Jane Smith) with specific locations and levels.
-   ** (NEW)**: Temporary script to fix missing .
    -   Summary: Used once to backfill  for existing seed data.
    -   Changes: New file created.
-   ****: Main React routing.
    -   Summary: Defines application routes.
    -   Changes: Added new routes for  (TutorAdmin) and  (TutorLogin).
-   ****: Frontend UI for Math Analysis System.
    -   Summary: Provides UI for result uploads, analytics, revision plans, and assessment generation.
    -   Changes: Integrated authentication logic (tutor context, login/logout). Replaced static dropdowns with dynamic, tutor-filtered cascading dropdowns for location, level, and subject in both PDF and Manual Entry forms. Fixed mobile alignment for Generate Assessment button. Added filtering (Level, Location), view mode toggle (Grid/List), overall score display, and CRUD operations (delete, edit modal) to Revision Plans. Updated Analytics tab filters to use dynamic .
-   ** (NEW)**: Admin UI for managing tutors.
    -   Summary: Provides forms for adding new tutors, selecting their attributes, and generating credentials.
    -   Changes: New file created. Implemented UI for adding/editing tutors, showing temporary passwords, and a Reset Password button. Updated location options to the predefined 5.
-   ** (NEW)**: Tutor login UI.
    -   Summary: Allows tutors to log in to the system.
    -   Changes: New file created.
</code_architecture>

<pending_tasks>
-   **WhatsApp Bot Connection:** Resolve persistent Connection Failure errors in  for QR code generation and re-authentication.
-   **Topic Library Population:** The master topic file for S1-S4, J1-J2 with real links (PDF, video, worksheet) still needs to be provided by the user and integrated into the  collection in Firebase.
</pending_tasks>

<current_work>
Immediately before this summary, the AI engineer successfully resolved critical issues related to tutor data isolation and the correct display of locations in the Admin panel.

Specifically:
1.  **Tutor Data Isolation:** The system now correctly isolates student results per tutor. Initial issues where new tutors inherited Sean Yeo's data were resolved by:
    *   Implementing a script () to correctly tag existing seed student data with .
    *   Making authentication **mandatory** again across all relevant backend endpoints (, ,  in ).
    *   Ensuring consistent  usage for JWT validation in  and .
    *   As a result, logging in as a new tutor (e.g., Jane Smith) now displays an empty dashboard with No results found, confirming that she does not see Sean Yeo's students. Sean Yeo, in turn, only sees his 3 students.
2.  **Admin Tutor Creation Locations:** The admin form for creating new tutor profiles () has been updated to precisely use the 5 specified teaching locations: Marine Parade, Bishan, Punggol, Kovan, and Jurong. This ensures data consistency and adherence to product requirements for tutor location selection.
</current_work>

<optional_next_step>
Address the pending WhatsApp Bot connection issue as outlined in the pending tasks.
</optional_next_step>
